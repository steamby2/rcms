version: '3.8'

services:
  # VM1: Simulateur DME avec SNMPv3
  dme_simulator:
    build:
      context: ./vm1_dme_simulator
      dockerfile: Dockerfile
    container_name: rcms_dme_simulator
    restart: unless-stopped
    ports:
      - "161:161/udp"  # Port SNMP
      - "5000:5000"    # Port API REST (fallback)
    volumes:
      - ./vm1_dme_simulator:/app
      - ./logs/dme_simulator:/app/logs
    environment:
      - SNMP_USER=dmeuser
      - SNMP_AUTH_PROTOCOL=SHA
      - SNMP_AUTH_PASSWORD=authpassword
      - SNMP_PRIV_PROTOCOL=AES
      - SNMP_PRIV_PASSWORD=privpassword
    networks:
      - rcms_network
    user: "1000:1000"  # Exécution en tant qu'utilisateur non-root
    cap_drop:
      - ALL          # Suppression de toutes les capacités Linux
    cap_add:
      - NET_BIND_SERVICE  # Autorisation pour lier le port 161
    healthcheck:
      test: ["CMD", "snmpwalk", "-v3", "-l", "authPriv", "-u", "dmeuser", "-a", "SHA", "-A", "authpassword", "-x", "AES", "-X", "privpassword", "localhost:161", "1.3.6.1.4.1.32275.2.1.2.2.5.10"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # VM2: Collecteur de données avec SNMPv3
  data_collector:
    build:
      context: ./vm2_data_collector
      dockerfile: Dockerfile
    container_name: rcms_data_collector
    restart: unless-stopped
    depends_on:
      - dme_simulator
    volumes:
      - ./vm2_data_collector:/app
      - ./data:/app/data
      - ./logs/data_collector:/app/logs
    environment:
      - SNMP_HOST=dme_simulator
      - SNMP_PORT=161
      - SNMP_USER=dmeuser
      - SNMP_AUTH_PROTOCOL=SHA
      - SNMP_AUTH_PASSWORD=authpassword
      - SNMP_PRIV_PROTOCOL=AES
      - SNMP_PRIV_PASSWORD=privpassword
      - COLLECTION_INTERVAL=180
      - OUTPUT_FILE=/app/data/dme_data.csv
      - LOGSTASH_ENABLED=true
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044
    networks:
      - rcms_network
    user: "1000:1000"  # Exécution en tant qu'utilisateur non-root
    cap_drop:
      - ALL          # Suppression de toutes les capacités Linux
    read_only: true  # Système de fichiers en lecture seule
    tmpfs:
      - /tmp         # Montage temporaire pour les fichiers temporaires

  # VM3: Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: rcms_elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./vm3_elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./vm3_elasticsearch/certs:/usr/share/elasticsearch/config/certs:ro
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD_FILE=/run/secrets/elastic_password
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - rcms_network
    secrets:
      - elastic_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # VM4: Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: rcms_logstash
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
      - "5045:5045"
    volumes:
      - ./vm4_logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./vm4_logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./vm4_logstash/certs:/etc/logstash/certs:ro
      - ./logs/logstash:/var/log/logstash
    environment:
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD_FILE=/run/secrets/elastic_password
    networks:
      - rcms_network
    secrets:
      - elastic_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # VM5: Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: rcms_kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    volumes:
      - ./vm5_kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./vm5_kibana/certs:/etc/kibana/certs:ro
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD_FILE=/run/secrets/elastic_password
      - ENCRYPTION_KEY_FILE=/run/secrets/kibana_encryption_key
    networks:
      - rcms_network
    secrets:
      - elastic_password
      - kibana_encryption_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  rcms_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  elasticsearch_data:
    driver: local

secrets:
  elastic_password:
    file: ./secrets/elastic_password.txt
  kibana_encryption_key:
    file: ./secrets/kibana_encryption_key.txt
