input {
  # Réception des données du collecteur DME
  tcp {
    port => 5044
    codec => json
    type => "dme_metrics"
    ssl_enable => true
    ssl_cert => "/etc/logstash/certs/logstash.crt"
    ssl_key => "/etc/logstash/certs/logstash.key"
    ssl_verify => false
  }
  
  # Surveillance des fichiers de logs du système
  file {
    path => "/var/log/dme_collector.log"
    start_position => "beginning"
    type => "collector_logs"
  }
  
  # Surveillance des métriques système
  beats {
    port => 5045
    ssl => true
    ssl_certificate => "/etc/logstash/certs/logstash.crt"
    ssl_key => "/etc/logstash/certs/logstash.key"
    ssl_verify_mode => "none"
  }
}

filter {
  if [type] == "dme_metrics" {
    # Traitement des métriques DME
    date {
      match => [ "@timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Ajout de métadonnées
    mutate {
      add_field => {
        "environment" => "production"
        "application" => "dme_monitoring"
      }
    }
    
    # Conversion des types de données
    mutate {
      convert => {
        "metrics.mtuExecTXPADelayCurrentValue-0" => "integer"
        "metrics.mtuExecTXPBDelayCurrentValue-0" => "integer"
        "metrics.mtuExecTXPADelayCurrentValue-3" => "integer"
        "metrics.mtuExecTXPBDelayCurrentValue-3" => "integer"
        "metrics.mtuExecTXPAPulsePairSpacing-0" => "integer"
        "metrics.mtuExecTXPBPulsePairSpacing-0" => "integer"
        "metrics.mtuExecTXPAPulsePairSpacing-3" => "integer"
        "metrics.mtuExecTXPBPulsePairSpacing-3" => "integer"
        "metrics.mtuExecTXPATransmittedPowerCurrentValue-0" => "integer"
        "metrics.mtuExecTXPBTransmittedPowerCurrentValue-0" => "integer"
        "metrics.mtuExecTXPATransmittedPowerCurrentValue-3" => "integer"
        "metrics.mtuExecTXPBTransmittedPowerCurrentValue-3" => "integer"
        "metrics.mtuExecTXPAEfficiency-0" => "integer"
        "metrics.mtuExecTXPBEfficiency-0" => "integer"
        "metrics.mtuExecTXPAEfficiency-3" => "integer"
        "metrics.mtuExecTXPBEfficiency-3" => "integer"
        "metrics.mtuExecTXPATxFreqError-0" => "integer"
        "metrics.mtuExecTXPBTxFreqError-0" => "integer"
        "metrics.mtuExecTXPATxFreqError-3" => "integer"
        "metrics.mtuExecTXPBTxFreqError-3" => "integer"
        "metrics.mtuExecRadiatedPowerCurrentValue-0" => "integer"
        "metrics.mtuExecRadiatedPowerCurrentValue-3" => "integer"
        "metrics.mtuExecTransmissionRate-0" => "integer"
        "metrics.mtuExecTransmissionRate-3" => "integer"
        "metrics.mtuExecIdentStatus-0" => "integer"
        "metrics.mtuExecIdentStatus-3" => "integer"
      }
    }
    
    # Calcul de métriques dérivées
    ruby {
      code => "
        metrics = event.get('metrics')
        if metrics
          # Calcul de la différence entre les canaux A et B
          event.set('[metrics][txDelayDiff-0]', 
            metrics['mtuExecTXPBDelayCurrentValue-0'].to_i - 
            metrics['mtuExecTXPADelayCurrentValue-0'].to_i)
          event.set('[metrics][txDelayDiff-3]', 
            metrics['mtuExecTXPBDelayCurrentValue-3'].to_i - 
            metrics['mtuExecTXPADelayCurrentValue-3'].to_i)
            
          # Calcul de la moyenne d'efficacité
          event.set('[metrics][avgEfficiency-0]', 
            (metrics['mtuExecTXPAEfficiency-0'].to_i + 
             metrics['mtuExecTXPBEfficiency-0'].to_i) / 2.0)
          event.set('[metrics][avgEfficiency-3]', 
            (metrics['mtuExecTXPAEfficiency-3'].to_i + 
             metrics['mtuExecTXPBEfficiency-3'].to_i) / 2.0)
        end
      "
    }
    
    # Détection d'anomalies simples
    ruby {
      code => "
        metrics = event.get('metrics')
        if metrics
          # Vérification des seuils critiques
          alerts = []
          
          if metrics['mtuExecTXPBDelayCurrentValue-0'].to_i > 49400 || 
             metrics['mtuExecTXPBDelayCurrentValue-0'].to_i < 49000
            alerts << 'Delay-0 out of range'
          end
          
          if metrics['mtuExecTXPBDelayCurrentValue-3'].to_i > 49400 || 
             metrics['mtuExecTXPBDelayCurrentValue-3'].to_i < 49000
            alerts << 'Delay-3 out of range'
          end
          
          if metrics['mtuExecTXPBEfficiency-0'].to_i < 85
            alerts << 'Low efficiency on channel 0'
          end
          
          if metrics['mtuExecTXPBEfficiency-3'].to_i < 85
            alerts << 'Low efficiency on channel 3'
          end
          
          if alerts.size > 0
            event.set('[metrics][alerts]', alerts)
            event.set('[metrics][alert_count]', alerts.size)
            event.set('[metrics][alert_level]', 'warning')
          end
        end
      "
    }
  }
  
  if [type] == "collector_logs" {
    # Traitement des logs du collecteur
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:log_name} - %{LOGLEVEL:log_level} - %{GREEDYDATA:log_message}" }
    }
    
    # Classification des logs
    if [log_level] == "ERROR" or [log_level] == "CRITICAL" {
      mutate {
        add_field => { "priority" => "high" }
      }
    } else if [log_level] == "WARNING" {
      mutate {
        add_field => { "priority" => "medium" }
      }
    } else {
      mutate {
        add_field => { "priority" => "low" }
      }
    }
  }
}

output {
  # Envoi des données à Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTIC_USERNAME}"
    password => "${ELASTIC_PASSWORD}"
    ssl => true
    ssl_certificate_verification => false
    index => "rcms-dme-%{+YYYY.MM.dd}"
    document_type => "%{type}"
  }
  
  # Envoi des alertes critiques vers un fichier de log séparé
  if [metrics][alert_count] and [metrics][alert_count] > 0 {
    file {
      path => "/var/log/dme_alerts.log"
      codec => line { format => "[%{@timestamp}] Alert Level: %{[metrics][alert_level]} - Alerts: %{[metrics][alerts]}" }
    }
  }
  
  # Journalisation des événements de traitement
  stdout {
    codec => rubydebug
  }
}
